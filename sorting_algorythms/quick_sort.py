# Опишіть функцію з назвою quick_sort, яка отримує єдиний аргумент "sequence" - список, який потрібно відсортувати.
def quick_sort(sequence):
    # Якщо довжина послідовності дорівнює 0 або 1, повернути послідовність (вже відсортовану).
    if len(sequence) <= 1:
        return sequence

    # Встановити перший елемент послідовності як pivot.
    pivot = sequence[0]

    # Створіть список з назвою 'left', що містить елементи з послідовності, які менші за pivot.
    left = [element for element in sequence[1:] if element < pivot]

    # Створіть список з назвою 'right', що містить елементи з послідовності, які більші або дорівнюють pivot.
    right = [element for element in sequence[1:] if element >= pivot]

    # Рекурсивно викликати quick_sort для лівого та правого списків, а потім об'єднати їх за допомогою півота між ними.
    return quick_sort(left) + [pivot] + quick_sort(right)


# Якщо цей скрипт виконується безпосередньо (а не імпортується як модуль), виконайте операцію сортування.
if __name__ == "__main__":
    # Визначити список to_sort, що містить невідсортовані цілі числа.
    to_sort = [15, 9, 8, 1, 4, 11, 7, 12, 13, 6, 5, 3, 16, 2, 10, 14]

    # Викликати функцію quick_sort зі списком to_sort як аргументом і вивести результат.
    print(quick_sort(to_sort))
