# Опишіть функцію choice_sort, яка отримує єдиний аргумент "sequence" - список, який потрібно відсортувати.
def choice_sort(sequence):
    # Описати внутрішню функцію get_max_index, яка знаходить індекс максимального елементу в послідовності.
    def get_max_index():
        # Ініціалізувати max_index рівним 0.
        max_index = 0
        # Ітерація по діапазону індексів до правої_межі.
        for index in range(right_bound + 1):
            # Якщо елемент з поточним індексом більший за елемент з максимальним індексом, оновити максимальний індекс.
            if sequence[max_index] < sequence[index]:
                max_index = index
        # Повернути індекс максимального знайденого елемента.
        return max_index

    # Ініціалізувати правий_меж довжиною послідовності мінус 1.
    right_bound = len(sequence) - 1

    # Цикл до тих пір, поки right_bound не стане більшим за 1.
    while right_bound > 1:
        # Викликати функцію get_max_index для знаходження індексу максимального елементу у невідсортованій частині послідовності.
        max_index = get_max_index()
        # Поміняти місцями максимальний елемент з елементом у позиції right_bound.
        sequence[right_bound], sequence[max_index] = sequence[max_index], sequence[right_bound]
        # Зменшити right_bound на 1, оскільки найбільший елемент тепер знаходиться у відсортованій позиції.
        right_bound -= 1
        # Вивести поточний стан послідовності після кожного проходу через цикл.
        print(sequence)

    # Повернути відсортовану послідовність.
    return sequence


# Якщо цей скрипт виконується безпосередньо (а не імпортується як модуль), виконайте операцію сортування.
if __name__ == "__main__":
    # Визначити список to_sort, що містить невідсортовані цілі числа.
    to_sort = [15, 9, 8, 1, 4, 11, 7, 12, 13, 6, 5, 3, 16, 2, 10, 14]
    # Викликати функцію choice_sort зі списком to_sort в якості аргументу і вивести результат.
    print(choice_sort(to_sort))
