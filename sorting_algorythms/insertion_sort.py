# Опишіть функцію з назвою insertion_sort, яка отримує єдиний аргумент 'sequence', що є списком, який потрібно відсортувати.
def insertion_sort(sequence):
    # Перебирати індекси послідовності, починаючи з 1.
    for index in range(1, len(sequence)):
        # Зберегти поточний індекс у змінній 'position'.
        position = index - 1
        # Зберігати значення елементу за поточним індексом у змінній 'value'.
        value = sequence[index]
        # якщо 'position' більше або дорівнює 0, а елемент у 'position' більше, ніж 'value',
        # зсунути елементи праворуч, щоб звільнити місце для 'value'.
        while position >= 0 and sequence[position] > value:
            sequence[position + 1] = sequence[position]
            position -= 1
        # Вставити 'value' у правильну позицію у відсортованій частині послідовності.
        sequence[position + 1] = value
        # Вивести поточний стан послідовності після кожного проходу через внутрішній цикл.
        print(sequence)
    # Повернути відсортовану послідовність.
    return sequence


# Якщо цей скрипт виконується безпосередньо (а не імпортується як модуль), виконайте операцію сортування.
if __name__ == "__main__":
    # Визначити список to_sort, що містить невідсортовані цілі числа.
    to_sort = [15, 9, 8, 1, 4, 11, 7, 12, 13, 6, 5, 3, 16, 2, 10, 14]
    # Викликати функцію insertion_sort зі списком to_sort як аргумент і вивести результат.
    print(insertion_sort(to_sort))
